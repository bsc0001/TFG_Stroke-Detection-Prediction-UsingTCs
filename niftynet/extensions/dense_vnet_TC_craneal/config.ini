############################ Secciones de configuración de entrada
[ct]
path_to_search = ./data/dense_vnet_TC_craneal/
filename_contains = TC
spatial_window_size = (512, 512, 32)
interp_order = 1
axcodes=(A, R, S)

[label]
path_to_search = ./data/dense_vnet_TC_craneal/
filename_contains = mask
spatial_window_size = (512, 512, 32)
interp_order = 1
axcodes=(A, R, S)

[seg]
path_to_search = ./data/dense_vnet_TC_craneal/
filename_contains = _niftynet_out
spatial_window_size = (512, 512, 32)
interp_order = 1
axcodes=(A, R, S)

############################ Secciones de configuración del sistema
[SYSTEM]
cuda_devices = ""
num_threads = 3
num_gpus = 3
model_dir = models/dense_vnet_TC_craneal/
batch_size = 3
queue_length = 15

[NETWORK]
name = dense_vnet
#dense_vnet_TC_craneal.CNN_TC_craneal_ictus.MyNet // vnet
batch_size = 3
queue_length = 15

# Preprocesado del nivel de volumen
volume_padding_size = 0
window_sampling = resize
#weight_initializer: he_normal #zeros, ones

[TRAINING]
sample_per_volume = 1
lr = 0.001
loss_type = dense_vnet_TC_craneal.dice_hinge.dice
starting_iter = 0
save_every_n = 500
max_iter = 5501
#vars_to_restore = ^((?!(Adam)).)*$
#vars_to_restore=^.*(conv_1|conv_2).*$

[INFERENCE]
border = (0, 0, 0)
inference_iter = 5000
output_interp_order = 1
spatial_window_size = (512, 512, 32)
save_seg_dir = ./segmentation_output/

[EVALUATION]
evaluations = n_pos_ref,n_pos_seg,tp,tn,fp,fn,accuracy,sensitivity,false_positive_rate,positive_predictive_values,negative_predictive_values,dice,jaccard
evaluation_units = foreground
save_csv_dir = ./evaluation_test

############################ Secciones de configuración personalizada de aplicación para la segmentación.
[SEGMENTATION]
#image = ct
# Ante evaluación, se comenta la linea previa si el TC no se mantiene en la carpeta de datos de entrada.
label = label
inferred = seg
label_normalisation = False
output_prob = False
num_classes = 2
# Tejido isquémico (lesión) y el resto.

